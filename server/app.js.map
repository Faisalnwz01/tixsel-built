{"version":3,"sources":["app.js"],"names":["Promise","require","connect","mongo","uri","options","connection","on","err","console","error","process","exit","seedDB","app","server","createServer","socketio","serveClient","env","path","default","EventEmitter","prototype","_maxListeners","startServer","angularFullstack","listen","port","ip","log","get","settings","auth","username","password","AirService","createAirService","importPNR","catch","errors","Common","ValidationError","Request","RequestValidationError","ParamsMissing","exports","module"],"mappings":"AAAA;;;;AAIA;;;;;;AAEA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAJA,mBAASA,OAAT,GAAmBC,QAAQ,UAAR,CAAnB;;;AAOA;AACA,mBAASC,OAAT,CAAiB,sBAAOC,KAAP,CAAaC,GAA9B,EAAmC,sBAAOD,KAAP,CAAaE,OAAhD;AACA,mBAASC,UAAT,CAAoBC,EAApB,CAAuB,OAAvB,EAAgC,UAAUC,GAAV,EAAe;AAC7CC,UAAQC,KAAR,gCAA2CF,GAA3C;AACAG,UAAQC,IAAR,CAAa,CAAC,CAAd,EAF6C,CAE3B;AACnB,CAHD;;AAKA;AACA,IAAI,sBAAOC,MAAX,EAAmB;AACjBZ,UAAQ,eAAR;AACD;;AAED;AACA,IAAIa,MAAM,wBAAV;AACA,IAAIC,SAAS,eAAKC,YAAL,CAAkBF,GAAlB,CAAb;AACA,IAAIG,WAAWhB,QAAQ,WAAR,EAAqBc,MAArB,EAA6B;AAC1CG,eAAa,sBAAOC,GAAP,KAAe,YADc;AAE1CC,QAAM;AAFoC,CAA7B,CAAf;AAIAnB,QAAQ,mBAAR,EAA6BoB,OAA7B,CAAqCJ,QAArC;AACAhB,QAAQ,kBAAR,EAA4BoB,OAA5B,CAAoCP,GAApC;AACAb,QAAQ,UAAR,EAAoBoB,OAApB,CAA4BP,GAA5B;AACAb,QAAQ,QAAR,EAAkBqB,YAAlB,CAA+BC,SAA/B,CAAyCC,aAAzC,GAAyD,GAAzD;AACA;AACA,SAASC,WAAT,GAAuB;AACrBX,MAAIY,gBAAJ,GAAuBX,OAAOY,MAAP,CAAc,sBAAOC,IAArB,EAA2B,sBAAOC,EAAlC,EAAsC,YAAY;AACvEpB,YAAQqB,GAAR,CAAY,4CAAZ,EAA0D,sBAAOF,IAAjE,EAAuEd,IAAIiB,GAAJ,CAAQ,KAAR,CAAvE;AACD,GAFsB,CAAvB;AAGD;AACD,IAAMC,WAAW;AACfC,QAAM;AACJC,cAAU,eAAWA,QADjB;AAEJC,cAAU,eAAWA;AAFjB;AADS,CAAjB;AAMA,IAAMC,aAAa,mBAAKC,gBAAL,CAAsBL,QAAtB,CAAnB;;AAEAI,WAAWE,SAAX,GAAuBC,KAAvB,CAA6B,UAAC/B,GAAD,EAAS;AACpC,MAAIA,eAAe,mBAAKgC,MAAL,CAAYC,MAAZ,CAAmBC,eAAtC,EAAuD;AACrDjC,YAAQqB,GAAR,CAAY,0BAAZ;AACD;AACD,MAAItB,eAAe,mBAAKgC,MAAL,CAAYG,OAAZ,CAAoBC,sBAAvC,EAA+D;AAC7DnC,YAAQqB,GAAR,CAAY,qCAAZ;AACD;AACD,MAAItB,eAAe,mBAAKgC,MAAL,CAAYG,OAAZ,CAAoBC,sBAApB,CAA2CC,aAA9D,EAA6E;AAC3EpC,YAAQqB,GAAR,CAAY,gCAAZ;AACD;AACF,CAVD;;AAYA,4BAAaL,WAAb;;AAEA;AACAqB,UAAUC,OAAOD,OAAP,GAAiBhC,GAA3B","file":"app.js","sourcesContent":["/**\n * Main application file\n */\n\n'use strict';\n\nimport express from 'express';\nimport mongoose from 'mongoose';\nmongoose.Promise = require('bluebird');\nimport config from './config/environment';\nimport uAPIConfig from './config/uAPI';\nimport http from 'http';\nimport uAPI from 'uapi-json';\n\n\n// Connect to MongoDB\nmongoose.connect(config.mongo.uri, config.mongo.options);\nmongoose.connection.on('error', function (err) {\n  console.error(`MongoDB connection error: ${err}`);\n  process.exit(-1); // eslint-disable-line no-process-exit\n});\n\n// Populate databases with sample data\nif (config.seedDB) {\n  require('./config/seed');\n}\n\n// Setup server\nvar app = express();\nvar server = http.createServer(app);\nvar socketio = require('socket.io')(server, {\n  serveClient: config.env !== 'production',\n  path: '/socket.io-client'\n});\nrequire('./config/socketio').default(socketio);\nrequire('./config/express').default(app);\nrequire('./routes').default(app);\nrequire('events').EventEmitter.prototype._maxListeners = 100;\n// Start server\nfunction startServer() {\n  app.angularFullstack = server.listen(config.port, config.ip, function () {\n    console.log('Express server listening on %d, in %s mode', config.port, app.get('env'));\n  });\n}\nconst settings = {\n  auth: {\n    username: uAPIConfig.username,\n    password: uAPIConfig.password\n  }\n};\nconst AirService = uAPI.createAirService(settings);\n\nAirService.importPNR().catch((err) => {\n  if (err instanceof uAPI.errors.Common.ValidationError) {\n    console.log('Validation error occured');\n  }\n  if (err instanceof uAPI.errors.Request.RequestValidationError) {\n    console.log('Validation error occured in request');\n  }\n  if (err instanceof uAPI.errors.Request.RequestValidationError.ParamsMissing) {\n    console.log('Params are missing for request');\n  }\n});\n\nsetImmediate(startServer);\n\n// Expose app\nexports = module.exports = app;\n"],"sourceRoot":"/source/"}