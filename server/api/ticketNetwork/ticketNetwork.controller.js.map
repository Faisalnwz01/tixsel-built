{"version":3,"sources":["api/ticketNetwork/ticketNetwork.controller.js"],"names":["index","show","create","upsert","patch","destroy","respondWithResult","res","statusCode","entity","status","json","patchUpdates","patches","apply","err","reject","save","removeEntity","remove","then","end","handleEntityNotFound","handleError","send","req","get","query","key","dat","console","log","toJson","catch","findById","params","id","exec","body","_id","findOneAndUpdate","setDefaultsOnInsert","runValidators"],"mappings":"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","file":"api/ticketNetwork/ticketNetwork.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/ticketNetworks              ->  index\n * POST    /api/ticketNetworks              ->  create\n * GET     /api/ticketNetworks/:id          ->  show\n * PUT     /api/ticketNetworks/:id          ->  upsert\n * PATCH   /api/ticketNetworks/:id          ->  patch\n * DELETE  /api/ticketNetworks/:id          ->  destroy\n */\n\n'use strict';\n\nimport jsonpatch from 'fast-json-patch';\nimport TicketNetwork from './ticketNetwork.model';\nimport rp from 'request-promise';\nimport parser from 'xml2json';\n\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function (entity) {\n    if (entity) {\n      return res.status(statusCode).json(entity);\n    }\n    return null;\n  };\n}\n\nfunction patchUpdates(patches) {\n  return function (entity) {\n    try {\n      jsonpatch.apply(entity, patches, /*validate*/ true);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    return entity.save();\n  };\n}\n\nfunction removeEntity(res) {\n  return function (entity) {\n    if (entity) {\n      return entity.remove()\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function (entity) {\n    if (!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function (err) {\n    res.status(statusCode).send(err);\n  };\n}\n\n// Gets a list of TicketNetworks\nexport function index(req, res) {\n  return rp.get(`http://tnwebservices-test.ticketnetwork.com/TNWebservice/v3.2/TNWebserviceStringInputs.asmx/SearchEvents?websiteConfigID=23245&searchTerms=${req.query.key}&whereClause=&orderByClause=Date`)\n    .then(function (dat) {\n      console.log(`got this back for the searched term ${dat}`);\n      return parser.toJson(dat);\n    })\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Gets a single TicketNetwork from the DB\nexport function show(req, res) {\n  return TicketNetwork.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Creates a new TicketNetwork in the DB\nexport function create(req, res) {\n  return TicketNetwork.create(req.body)\n    .then(respondWithResult(res, 201))\n    .catch(handleError(res));\n}\n\n// Upserts the given TicketNetwork in the DB at the specified ID\nexport function upsert(req, res) {\n  if (req.body._id) {\n    delete req.body._id;\n  }\n  return TicketNetwork.findOneAndUpdate({\n    _id: req.params.id\n  }, req.body, {\n    upsert: true,\n    setDefaultsOnInsert: true,\n    runValidators: true\n  }).exec()\n\n  .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Updates an existing TicketNetwork in the DB\nexport function patch(req, res) {\n  if (req.body._id) {\n    delete req.body._id;\n  }\n  return TicketNetwork.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(patchUpdates(req.body))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Deletes a TicketNetwork from the DB\nexport function destroy(req, res) {\n  return TicketNetwork.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(removeEntity(res))\n    .catch(handleError(res));\n}\n"],"sourceRoot":"/source/"}